/*
  # Initial Schema Setup

  1. New Tables
    - Uprawnienia (Permissions)
      - ID_Uprawnienia (primary key)
      - Nazwa (name)
    
    - Uzytkownik (User)
      - ID_Użytkownik (primary key)
      - Imie (first name)
      - Nazwisko (last name)
      - Mail (email)
      - Hasło (password)
      - ID_Uprawnienia (foreign key)

    - Region
      - ID_Regionu (primary key)
      - Nazwa (name)

    - Kategoria (Category)
      - ID_Kategoria (primary key)
      - Nazwa (name)

    - Miejsce (Place)
      - ID_Miejsce (primary key)
      - ID_Region (foreign key)
      - ID_Kategoria (foreign key)
      - ID_Użytkownik (foreign key)
      - Nazwa (name)
      - Ulica (street)
      - Opis (description)
      - Data_dodania (date added)
      - Miejscowość (city)
      - Kod_pocztowy (postal code)
      - Link (link)

    - Recenzja (Review)
      - ID_Recenzja (primary key)
      - ID_Użytkownik (foreign key)
      - Ocena (rating)
      - Komentarz (comment)
      - Data_dodania (date added)
      - ID_Miejsce (foreign key)

    - Zdjęcia (Photos)
      - ID_Zdjęcie (primary key)
      - ID_Miejsce (foreign key)
      - ID_Recenzja (foreign key)
      - URL (photo URL)

    - Historia_wyszukiwan (Search History)
      - ID_Historia (primary key)
      - ID_Użytkownik (foreign key)
      - Data_wyszukiwania (search date)
      - ID_Miejsce (foreign key)

    - Ranking
      - ID_Ranking (primary key)
      - Nazwa (name)
      - Opis (description)
      - Data_utworzenia (creation date)

    - Ranking_Miejsca (Ranking Places)
      - id (primary key)
      - ranking_id (foreign key)
      - miejsce_id (foreign key)

  2. Security
    - Enable RLS on all tables
    - Add policies for authenticated users

  3. Constraints
    - Foreign key relationships between tables
    - Unique constraints on email
    - Check constraint on postal code format
*/

-- Create Uprawnienia table
CREATE TABLE "Uprawnienia" (
    "ID_Uprawnienia" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "Nazwa" varchar
);

ALTER TABLE "Uprawnienia" ENABLE ROW LEVEL SECURITY;

-- Create Uzytkownik table
CREATE TABLE "Użytkownik" (
    "ID_Użytkownik" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "Imie" varchar,
    "Nazwisko" varchar,
    "Mail" varchar UNIQUE,
    "Hasło" varchar,
    "ID_Uprawnienia" integer NOT NULL REFERENCES "Uprawnienia"("ID_Uprawnienia") ON UPDATE CASCADE ON DELETE CASCADE
);

ALTER TABLE "Użytkownik" ENABLE ROW LEVEL SECURITY;

-- Create Region table
CREATE TABLE "Region" (
    "ID_Regionu" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "Nazwa" varchar
);

ALTER TABLE "Region" ENABLE ROW LEVEL SECURITY;

-- Create Kategoria table
CREATE TABLE "Kategoria" (
    "ID_Kategoria" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "Nazwa" varchar
);

ALTER TABLE "Kategoria" ENABLE ROW LEVEL SECURITY;

-- Create Miejsce table
CREATE TABLE "Miejsce" (
    "ID_Miejsce" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "ID_Region" integer NOT NULL REFERENCES "Region"("ID_Regionu") ON UPDATE CASCADE ON DELETE CASCADE,
    "ID_Kategoria" integer NOT NULL REFERENCES "Kategoria"("ID_Kategoria") ON UPDATE CASCADE ON DELETE CASCADE,
    "ID_Użytkownik" integer NOT NULL REFERENCES "Użytkownik"("ID_Użytkownik") ON UPDATE CASCADE ON DELETE CASCADE,
    "Nazwa" varchar,
    "Ulica" varchar,
    "Opis" varchar,
    "Data_dodania" date DEFAULT CURRENT_DATE,
    "Miejscowość" varchar,
    "Kod_pocztowy" varchar(6),
    "Link" varchar,
    CONSTRAINT "Miejsce_kod_pocztowy_check" CHECK (("Kod_pocztowy" ~ '^[0-9]{2}-[0-9]{3}$'))
);

ALTER TABLE "Miejsce" ENABLE ROW LEVEL SECURITY;

-- Create Recenzja table
CREATE TABLE "Recenzja" (
    "ID_Recenzja" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "ID_Użytkownik" integer NOT NULL REFERENCES "Użytkownik"("ID_Użytkownik") ON UPDATE CASCADE ON DELETE CASCADE,
    "Ocena" integer,
    "Komentarz" varchar,
    "Data_dodania" date DEFAULT CURRENT_DATE,
    "ID_Miejsce" integer NOT NULL REFERENCES "Miejsce"("ID_Miejsce") ON UPDATE CASCADE ON DELETE CASCADE
);

ALTER TABLE "Recenzja" ENABLE ROW LEVEL SECURITY;

-- Create Zdjęcia table
CREATE TABLE "Zdjęcia" (
    "ID_Zdjęcie" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "ID_Miejsce" integer REFERENCES "Miejsce"("ID_Miejsce") ON UPDATE CASCADE ON DELETE CASCADE,
    "ID_Recenzja" integer REFERENCES "Recenzja"("ID_Recenzja") ON UPDATE CASCADE ON DELETE CASCADE,
    "URL" varchar NOT NULL
);

ALTER TABLE "Zdjęcia" ENABLE ROW LEVEL SECURITY;

-- Create Historia_wyszukiwan table
CREATE TABLE "historia_wyszukiwan" (
    "ID_Historia" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "ID_Użytkownik" integer NOT NULL REFERENCES "Użytkownik"("ID_Użytkownik") ON UPDATE CASCADE ON DELETE CASCADE,
    "Data_wyszukiwania" timestamptz DEFAULT CURRENT_TIMESTAMP,
    "ID_Miejsce" integer NOT NULL REFERENCES "Miejsce"("ID_Miejsce") ON UPDATE CASCADE ON DELETE CASCADE
);

ALTER TABLE "historia_wyszukiwan" ENABLE ROW LEVEL SECURITY;

-- Create Ranking table
CREATE TABLE "Ranking" (
    "ID_Ranking" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "Nazwa" varchar(100) NOT NULL,
    "Opis" text,
    "Data_utworzenia" timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL
);

ALTER TABLE "Ranking" ENABLE ROW LEVEL SECURITY;

-- Create Ranking_Miejsca table
CREATE TABLE "Ranking_Miejsca" (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    ranking_id integer NOT NULL REFERENCES "Ranking"("ID_Ranking") ON DELETE CASCADE,
    miejsce_id integer NOT NULL REFERENCES "Miejsce"("ID_Miejsce") ON DELETE CASCADE,
    UNIQUE(ranking_id, miejsce_id)
);

ALTER TABLE "Ranking_Miejsca" ENABLE ROW LEVEL SECURITY;

-- Add RLS policies
CREATE POLICY "Enable read access for authenticated users" ON "Uprawnienia" FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable read access for authenticated users" ON "Użytkownik" FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable read access for authenticated users" ON "Region" FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable read access for authenticated users" ON "Kategoria" FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable read access for authenticated users" ON "Miejsce" FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable read access for authenticated users" ON "Recenzja" FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable read access for authenticated users" ON "Zdjęcia" FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable read access for authenticated users" ON "historia_wyszukiwan" FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable read access for authenticated users" ON "Ranking" FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable read access for authenticated users" ON "Ranking_Miejsca" FOR SELECT TO authenticated USING (true);

-- Add insert policies for authenticated users
CREATE POLICY "Enable insert for authenticated users" ON "Miejsce" FOR INSERT TO authenticated WITH CHECK (auth.uid() = "ID_Użytkownik"::text);
CREATE POLICY "Enable insert for authenticated users" ON "Recenzja" FOR INSERT TO authenticated WITH CHECK (auth.uid() = "ID_Użytkownik"::text);
CREATE POLICY "Enable insert for authenticated users" ON "Zdjęcia" FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Enable insert for authenticated users" ON "historia_wyszukiwan" FOR INSERT TO authenticated WITH CHECK (auth.uid() = "ID_Użytkownik"::text);

-- Add update policies for authenticated users
CREATE POLICY "Enable update for own content" ON "Miejsce" FOR UPDATE TO authenticated USING (auth.uid() = "ID_Użytkownik"::text);
CREATE POLICY "Enable update for own content" ON "Recenzja" FOR UPDATE TO authenticated USING (auth.uid() = "ID_Użytkownik"::text);

-- Add delete policies for authenticated users
CREATE POLICY "Enable delete for own content" ON "Miejsce" FOR DELETE TO authenticated USING (auth.uid() = "ID_Użytkownik"::text);
CREATE POLICY "Enable delete for own content" ON "Recenzja" FOR DELETE TO authenticated USING (auth.uid() = "ID_Użytkownik"::text);